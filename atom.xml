<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YuriCode</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-28T07:57:21.485Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LunaMyth</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前缀和与差分</title>
    <link href="http://example.com/2024/11/28/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
    <id>http://example.com/2024/11/28/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</id>
    <published>2024-11-28T00:15:18.000Z</published>
    <updated>2024-11-28T07:57:21.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>前缀和（Prefix Sum）是一个非常常见且高效的算法技巧，用来快速计算数组或矩阵中某个区间的元素和。它的核心思想是通过预处理数组（或矩阵），构建一个新的数组（或矩阵），使得可以在常数时间内计算任意区间的和，从而显著提高效率。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">9</span>;  </span><br><span class="line">ll arr[N] = &#123;<span class="number">0</span>&#125;;       </span><br><span class="line">ll prefix[N] = &#123;<span class="number">0</span>&#125;;     </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  </span><br><span class="line">    cin &gt;&gt; n;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入数组并计算前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];  </span><br><span class="line">        prefix[i] = prefix[i - <span class="number">1</span>] + arr[i];  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> m;  </span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理每个查询区间 [l, r]</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;  </span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; prefix[r] - prefix[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>目的是预处理出一个结构，以后每次查询二维数组任何范围上的累加和都是O(1)的操作<br>1 根据原始状况，生成二维前缀和数组sum，<br>   sum[i][j]: 代表左上角(0,0)到右下角(i,j)这个范围的累加和<br>   sum[i][j] +&#x3D; sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1];<br>2 查询左上角(a,b)到右下角(c,d)这个范围的累加和<br>   sum[c][d] - sum[c][b-1] - sum[a-1][d] + sum[a-1][b-1];<br>3 实际过程中往往补第0行、第0列来减少很多条件判断。<br>  当然也可以不补。根据个人习惯决定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e3</span>;  <span class="comment">// 定义二维数组的最大尺寸</span></span><br><span class="line">ll arr[N][N] = &#123;<span class="number">0</span>&#125;;       <span class="comment">// 原始数组</span></span><br><span class="line">ll prefix[N][N] = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 二维前缀和数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输入矩阵的大小</span></span><br><span class="line">    <span class="type">int</span> n; </span><br><span class="line">    cin &gt;&gt; n;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入子矩阵查询的坐标 (x1, y1) 到 (x2, y2)</span></span><br><span class="line">    <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入原始数组并计算二维前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; arr[i][j];</span><br><span class="line">            <span class="comment">// 计算二维前缀和</span></span><br><span class="line">            prefix[i][j] = prefix[i - <span class="number">1</span>][j] + prefix[i][j - <span class="number">1</span>] - prefix[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出原始数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原数组:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4lld &quot;</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出二维前缀和</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维前缀和:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4lld &quot;</span>, prefix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出指定子矩阵的和，并附加查询的区间</span></span><br><span class="line">    ll submatrix_sum = prefix[x2][y2] - prefix[x1 - <span class="number">1</span>][y2] - prefix[x2][y1 - <span class="number">1</span>] + prefix[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查询区域: (&quot;</span> &lt;&lt; x1 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y1 &lt;&lt; <span class="string">&quot;) 到 (&quot;</span> &lt;&lt; x2 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y2 &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子矩阵的和: &quot;</span> &lt;&lt; submatrix_sum &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>差分（Difference）是一种常见的算法技巧，通常用于处理数组或区间更新问题。差分的基本思想是通过对数组的差分（即存储相邻元素的差值）来高效地进行区间修改或区间查询。</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">9</span>;</span><br><span class="line">ll arr[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll diff[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll prefix[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建差分数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        diff[i] = arr[i] - arr[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出初始差分数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;差分数组:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; diff[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间操作：对 [l, r] 加 1</span></span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    diff[l] += <span class="number">1</span>;</span><br><span class="line">    diff[r + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过前缀和还原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        prefix[i] = prefix[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出还原后的数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;还原后的数组:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; prefix[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="经典例题-1"><a href="#经典例题-1" class="headerlink" title="经典例题"></a>经典例题</h3><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前缀和&quot;&gt;&lt;a href=&quot;#前缀和&quot; class=&quot;headerlink&quot; title=&quot;前缀和&quot;&gt;&lt;/a&gt;前缀和&lt;/h2&gt;&lt;p&gt;前缀和（Prefix Sum）是一个非常常见且高效的算法技巧，用来快速计算数组或矩阵中某个区间的元素和。它的核心思想是通过预处理数组（或矩阵），构建一个新的数组（或矩阵），使得可以在常数时间内计算任意区间的和，从而显著提高效率。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>二分答案法</title>
    <link href="http://example.com/2024/11/25/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E6%B3%95/"/>
    <id>http://example.com/2024/11/25/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E6%B3%95/</id>
    <published>2024-11-25T00:35:18.000Z</published>
    <updated>2024-11-27T02:10:21.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分答案法"><a href="#二分答案法" class="headerlink" title="二分答案法"></a>二分答案法</h2><p>1、估计最终答案可能范围是什么<br>2、分析问题的答案和给定条件的单调性，大部分的时候只需要用到自然智慧<br>3、建立一个f函数，当答案固定的情况下，判断给定的条件是否达标<br>4、在最终答案可能的范围内不断二分搜索，每次用f函数判断，直到二分结束，找到最合适的答案</p><span id="more"></span><h3 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h3><h4 id="进击的奶牛"><a href="#进击的奶牛" class="headerlink" title="进击的奶牛"></a>进击的奶牛</h4><p><a href="https://www.luogu.com.cn/problem/P1824">https://www.luogu.com.cn/problem/P1824</a></p><h5 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//隔间位置 1 2 4 8 9</span><br><span class="line">//最小可能距离l = 1</span><br><span class="line">//最大可能距离r = 9 - 1 = 8</span><br><span class="line">//l...mid...r</span><br><span class="line">//将mid = (1 + 8) / 2 = 4作为最小距离</span><br><span class="line"></span><br><span class="line">//第一次二分尝试</span><br><span class="line">//mid = 4</span><br><span class="line"></span><br><span class="line">//第一头牛放在隔间1</span><br><span class="line">//第二头牛放在距离隔间1至少4的下一个隔间</span><br><span class="line">//2 - 1 = 1 (x)</span><br><span class="line">//4 - 1 = 3 (x)</span><br><span class="line">//8 - 1 = 7 (o)</span><br><span class="line">//第二头牛放在隔间4</span><br><span class="line">//第三头牛放在距离隔间4至少4的下一个隔间</span><br><span class="line">//9 - 8 = 1 (x)</span><br><span class="line">//无法放置第三头牛，尝试更小的距离</span><br><span class="line">//r = mid - 1 = 3</span><br><span class="line"></span><br><span class="line">//第二次二分尝试</span><br><span class="line">//mid = (1 + 3) / 2 = 2</span><br><span class="line"></span><br><span class="line">//第一头牛放在隔间1</span><br><span class="line">//第二头牛放在距离隔间1至少3的下一个隔间</span><br><span class="line">//2 - 1 = 1 (x)</span><br><span class="line">//4 - 1 = 3 (o)</span><br><span class="line">//第二头牛放在隔间3</span><br><span class="line">//第三头牛放在距离隔间3至少4的下一个隔间</span><br><span class="line">//8 - 4 = 3 (o)</span><br><span class="line">//第三头牛放在隔间4</span><br><span class="line">//尝试更大距离</span><br><span class="line">//l = mid + 1 = 3</span><br><span class="line"></span><br><span class="line">//第三次二分尝试</span><br><span class="line">//mid = (3 + 3) / 2 = 3</span><br><span class="line">//第一头牛放在隔间1</span><br><span class="line">//第二头牛放在距离隔间1至少3的下一个隔间</span><br><span class="line">//2 - 1 = 1 (x)</span><br><span class="line">//4 - 1 = 3 (o)</span><br><span class="line">//第二头牛放在隔间3</span><br><span class="line">//第三头牛放在距离隔间3至少4的下一个隔间</span><br><span class="line">//8 - 4 = 3 (o)</span><br><span class="line">//第三头牛放在隔间4</span><br><span class="line">//尝试更大距离</span><br><span class="line">//l = mid + 1 = 4</span><br><span class="line"></span><br><span class="line">//l &gt; r时退出循环</span><br><span class="line">//ans = 3</span><br></pre></td></tr></table></figure><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N, C;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100006</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否可按最小距离放置C头牛</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;      <span class="comment">//已放置的牛数</span></span><br><span class="line"><span class="type">int</span> last = arr[<span class="number">0</span>];  <span class="comment">//上一头牛的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] - last &gt;= mid) &#123;</span><br><span class="line">count++;</span><br><span class="line">last = arr[i];</span><br><span class="line"><span class="keyword">if</span> (count == C) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大最小距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>;           <span class="comment">//最小可能距离</span></span><br><span class="line"><span class="type">int</span> r = arr[N - <span class="number">1</span>] - arr[<span class="number">0</span>];  <span class="comment">//最大可能距离</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;    <span class="comment">//尝试更大的最小距离</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;    <span class="comment">//尝试更小的最大距离</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; N &gt;&gt; C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(arr, arr + N);</span><br><span class="line">cout &lt;&lt; <span class="built_in">BS</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳石头"><a href="#跳石头" class="headerlink" title="跳石头"></a>跳石头</h4><p><a href="https://www.luogu.com.cn/problem/P2678">https://www.luogu.com.cn/problem/P2678</a></p><h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> L, N, M;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">50005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测是否可以移走所有距离小于最短跳跃距离的石头</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> pre = <span class="number">0</span>;<span class="comment">//上一个未移除的石头的位置</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里不能直接遍历整个数组，因为可能会移除终点处的石头</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] - pre &lt; d) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pre = arr[i];  <span class="comment">//更新上一个未移除的石头位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[N + <span class="number">1</span>] - pre &lt; d) count++;</span><br><span class="line"><span class="keyword">return</span> count &lt;= M; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//找到最大最小距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> r = L;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; L &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">arr[N + <span class="number">1</span>] = L;</span><br><span class="line">cout &lt;&lt; <span class="built_in">BS</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二分答案法&quot;&gt;&lt;a href=&quot;#二分答案法&quot; class=&quot;headerlink&quot; title=&quot;二分答案法&quot;&gt;&lt;/a&gt;二分答案法&lt;/h2&gt;&lt;p&gt;1、估计最终答案可能范围是什么&lt;br&gt;2、分析问题的答案和给定条件的单调性，大部分的时候只需要用到自然智慧&lt;br&gt;3、建立一个f函数，当答案固定的情况下，判断给定的条件是否达标&lt;br&gt;4、在最终答案可能的范围内不断二分搜索，每次用f函数判断，直到二分结束，找到最合适的答案&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>轮廓之间</title>
    <link href="http://example.com/2024/11/24/%E8%BD%AE%E5%BB%93%E4%B9%8B%E9%97%B4/"/>
    <id>http://example.com/2024/11/24/%E8%BD%AE%E5%BB%93%E4%B9%8B%E9%97%B4/</id>
    <published>2024-11-23T22:30:01.000Z</published>
    <updated>2024-11-23T23:26:51.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="轮廓之间"><a href="#轮廓之间" class="headerlink" title="轮廓之间"></a>轮廓之间</h2><span id="more"></span><h3 id="轮廓的起点"><a href="#轮廓的起点" class="headerlink" title="轮廓的起点"></a>轮廓的起点</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;轮廓之间&quot;&gt;&lt;a href=&quot;#轮廓之间&quot; class=&quot;headerlink&quot; title=&quot;轮廓之间&quot;&gt;&lt;/a&gt;轮廓之间&lt;/h2&gt;</summary>
    
    
    
    <category term="百合" scheme="http://example.com/categories/%E7%99%BE%E5%90%88/"/>
    
    
    <category term="小说" scheme="http://example.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>长度最小的子数组</title>
    <link href="http://example.com/2024/11/20/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2024/11/20/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2024-11-20T00:54:46.000Z</published>
    <updated>2024-11-20T01:10:17.574Z</updated>
    
    <content type="html"><![CDATA[<h3 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h3><p>给定一个正整数数组 nums 和一个正整数 target，请找出该数组中满足其和 大于或等于 target 的长度最小的连续子数组，并返回该子数组的长度。如果不存在这样的子数组，返回 0。</p><span id="more"></span><h2 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minLen</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> min = n + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i ; j &lt; n; j++) &#123;</span><br><span class="line">sum += arr[j];</span><br><span class="line"><span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">len = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (len &lt; min) &#123;</span><br><span class="line">min = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (min == n + <span class="number">1</span>) ? <span class="number">0</span> : min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;长度最小的子数组&quot;&gt;&lt;a href=&quot;#长度最小的子数组&quot; class=&quot;headerlink&quot; title=&quot;长度最小的子数组&quot;&gt;&lt;/a&gt;长度最小的子数组&lt;/h3&gt;&lt;p&gt;给定一个正整数数组 nums 和一个正整数 target，请找出该数组中满足其和 大于或等于 target 的长度最小的连续子数组，并返回该子数组的长度。如果不存在这样的子数组，返回 0。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>移除元素</title>
    <link href="http://example.com/2024/11/19/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2024/11/19/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2024-11-19T05:29:06.000Z</published>
    <updated>2024-11-25T00:34:31.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>移除元素是一个常见的算法问题，通常要求从数组中删除指定的目标值 target，并返回移除后的数组或新数组的长度。操作需要在原地完成，也就是不借助额外的数组空间，并尽可能优化性能。</p><span id="more"></span><h3 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">            i--;  <span class="comment">// 更新下标索引</span></span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// 慢指针，记录下一个保留元素的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != target) &#123; <span class="comment">// 如果当前元素不是目标</span></span><br><span class="line">            arr[j] = arr[i];    <span class="comment">// 将当前元素保留</span></span><br><span class="line">            j++;                <span class="comment">// 移动慢指针</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n = j; <span class="comment">// 更新数组的新长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;移除元素&quot;&gt;&lt;a href=&quot;#移除元素&quot; class=&quot;headerlink&quot; title=&quot;移除元素&quot;&gt;&lt;/a&gt;移除元素&lt;/h2&gt;&lt;p&gt;移除元素是一个常见的算法问题，通常要求从数组中删除指定的目标值 target，并返回移除后的数组或新数组的长度。操作需要在原地完成，也就是不借助额外的数组空间，并尽可能优化性能。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>二分查找法</title>
    <link href="http://example.com/2024/11/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
    <id>http://example.com/2024/11/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</id>
    <published>2024-11-19T03:37:01.000Z</published>
    <updated>2024-11-26T09:11:37.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><p>二分查找法（Binary Search）是一种在有序数组或列表中快速查找目标值的算法。它通过将查找范围逐步减半，有效地减少了比较次数，时间复杂度为O(logN)，适用于数据量较大且有序的场景。</p><span id="more"></span><h3 id="左闭右闭区间-left-right"><a href="#左闭右闭区间-left-right" class="headerlink" title="左闭右闭区间 [left, right]"></a>左闭右闭区间 [left, right]</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchClosed</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; <span class="comment">// 初始化右边界为数组最后一个索引</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; <span class="comment">// 区间为 [left, right]</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 缩小右边界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 缩小左边界</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到目标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左闭右开区间-left-right"><a href="#左闭右开区间-left-right" class="headerlink" title="左闭右开区间 [left, right)"></a>左闭右开区间 [left, right)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchOpen</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n; <span class="comment">// 初始化右边界为 n（超出有效索引范围）</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 区间为 [left, right)</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target)</span><br><span class="line">            right = mid; <span class="comment">// 缩小右边界，但不包括 mid</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 缩小左边界</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到目标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h2><h3 id="查找元素第一次出现的位置"><a href="#查找元素第一次出现的位置" class="headerlink" title="查找元素第一次出现的位置"></a>查找元素第一次出现的位置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchFirstOccurrence</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>; <span class="comment">// 用于记录目标值的第一个位置</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = mid;     <span class="comment">// 记录当前匹配位置</span></span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// 继续向左查找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回找到的第一个位置，若未找到则为 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找-target的第一个元素的位置"><a href="#查找-target的第一个元素的位置" class="headerlink" title="查找&gt;&#x3D;target的第一个元素的位置"></a>查找&gt;&#x3D;target的第一个元素的位置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchFirstGE</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;   <span class="comment">// 记录满足条件的最小索引</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= target) &#123;</span><br><span class="line">            result = mid;     <span class="comment">// 记录当前索引</span></span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// 继续向左搜索</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回找到的第一个 &gt;= target 的元素索引，未找到则返回 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找&lt;&#x3D;target的第一个元素的位置"></a>查找&lt;&#x3D;target的第一个元素的位置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchLastLE</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;   <span class="comment">// 记录满足条件的最大索引</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt;= target) &#123;</span><br><span class="line">            result = mid;     <span class="comment">// 记录当前索引</span></span><br><span class="line">            left = mid + <span class="number">1</span>;   <span class="comment">// 继续向右搜索</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回找到的最后一个 &lt;= target 的元素索引，未找到则返回 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找函数的根"><a href="#查找函数的根" class="headerlink" title="查找函数的根"></a>查找函数的根</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分成多个小区间，分别查找</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">BS</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (r - l &gt; <span class="number">0.0001</span>) &#123;</span><br><span class="line"><span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">f</span>(l) * <span class="built_in">f</span>(mid) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二分查找法&quot;&gt;&lt;a href=&quot;#二分查找法&quot; class=&quot;headerlink&quot; title=&quot;二分查找法&quot;&gt;&lt;/a&gt;二分查找法&lt;/h2&gt;&lt;p&gt;二分查找法（Binary Search）是一种在有序数组或列表中快速查找目标值的算法。它通过将查找范围逐步减半，有效地减少了比较次数，时间复杂度为O(logN)，适用于数据量较大且有序的场景。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>高精度算法</title>
    <link href="http://example.com/2024/11/18/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2024/11/18/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/</id>
    <published>2024-11-17T16:33:36.000Z</published>
    <updated>2024-11-26T05:26:18.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h2><p>高精度算法主要用于处理比普通数据类型更大的数值。普通的数据类型（如 <code>int</code>, <code>long long</code>）无法满足对非常大的数进行计算时的需求。高精度算法通过模拟手工运算过程，逐位处理数字，保证了数值的准确性和有效性。</p><p>在高精度运算中，常见的操作包括加法、减法、乘法等，它们通常在字符串中以逐位的方式实现，以应对超过普通数据类型范围的数值。</p><span id="more"></span><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><p>去除字符串的前导零</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RE0</span> <span class="params">(string &amp; str)</span> </span>&#123;</span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">0</span>, str.<span class="built_in">find_first_not_of</span>(<span class="string">&quot;0&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        str = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>高精度加法通过逐位加法和进位处理来模拟实际的加法过程。下面是加法实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对齐两个字符串长度</span></span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">            str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len2 &gt; len1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len2 - len1; i++) &#123;</span><br><span class="line">            str1 = <span class="string">&quot;0&quot;</span> + str1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cf = <span class="number">0</span>; <span class="comment">// 进位</span></span><br><span class="line">    len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = str1[i] - <span class="string">&#x27;0&#x27;</span> + str2[i] - <span class="string">&#x27;0&#x27;</span> + cf;</span><br><span class="line">        cf = temp / <span class="number">10</span>;  <span class="comment">// 更新进位</span></span><br><span class="line">        str = <span class="built_in">to_string</span>(temp % <span class="number">10</span>) + str;  <span class="comment">// 拼接结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cf != <span class="number">0</span>) str = <span class="built_in">to_string</span>(cf) + str;  <span class="comment">// 如果有最终进位，加到结果前面</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p>高精度减法通过逐位减法和借位处理来模拟实际的减法过程。代码实现如下：</p><h4 id="大数减小数"><a href="#大数减小数" class="headerlink" title="大数减小数"></a>大数减小数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对齐两个字符串长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">        str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> br = <span class="number">0</span>; <span class="comment">// 借位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = (str1[i] - <span class="string">&#x27;0&#x27;</span>) - (str2[i] - <span class="string">&#x27;0&#x27;</span>) - br;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            temp += <span class="number">10</span>;  <span class="comment">// 处理借位</span></span><br><span class="line">            br = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            br = <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        str = <span class="built_in">to_string</span>(temp) + str;  <span class="comment">// 拼接结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">RE0</span>(str);  <span class="comment">// 去除多余的前导零</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任意两数"><a href="#任意两数" class="headerlink" title="任意两数"></a>任意两数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (len1 != len2) <span class="keyword">return</span> len1 &lt; len2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> str1 &lt; str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">string str;</span><br><span class="line">string flag;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">compare</span>(str1, str2)) &#123;</span><br><span class="line"><span class="built_in">swap</span>(str1, str2);</span><br><span class="line">flag = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> br = <span class="number">0</span>;</span><br><span class="line">len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> temp = (str1[i] - <span class="string">&#x27;0&#x27;</span>) - (str2[i] - <span class="string">&#x27;0&#x27;</span>) - br;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">temp += <span class="number">10</span>;</span><br><span class="line">br = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">br = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">str = <span class="built_in">to_string</span>(temp % <span class="number">10</span>) + str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">RE0</span>(str); </span><br><span class="line">str = flag + str;</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p>高精度乘法通过逐位乘法和进位处理来模拟实际的乘法过程。实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">mul</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    string tempstr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len2 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = str2[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tempstr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cf = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加对应的零</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2 - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                tempstr = tempstr + <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 乘法运算</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = len1 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                t = (temp * (str1[j] - <span class="string">&#x27;0&#x27;</span>) + cf) % <span class="number">10</span>;</span><br><span class="line">                cf = (temp * (str1[j] - <span class="string">&#x27;0&#x27;</span>) + cf) / <span class="number">10</span>;</span><br><span class="line">                tempstr = <span class="built_in">to_string</span>(t) + tempstr;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (cf != <span class="number">0</span>) tempstr = <span class="built_in">to_string</span>(cf) + tempstr;  <span class="comment">// 添加进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 累加到结果</span></span><br><span class="line">        str = <span class="built_in">add</span>(str, tempstr);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">RE0</span>(str);  <span class="comment">// 去除前导零</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;高精度算法&quot;&gt;&lt;a href=&quot;#高精度算法&quot; class=&quot;headerlink&quot; title=&quot;高精度算法&quot;&gt;&lt;/a&gt;高精度算法&lt;/h2&gt;&lt;p&gt;高精度算法主要用于处理比普通数据类型更大的数值。普通的数据类型（如 &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;）无法满足对非常大的数进行计算时的需求。高精度算法通过模拟手工运算过程，逐位处理数字，保证了数值的准确性和有效性。&lt;/p&gt;
&lt;p&gt;在高精度运算中，常见的操作包括加法、减法、乘法等，它们通常在字符串中以逐位的方式实现，以应对超过普通数据类型范围的数值。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="高精度" scheme="http://example.com/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
</feed>
